[gd_scene load_steps=23 format=2]

[ext_resource path="res://assets/balcony/watering_can.png" type="Texture" id=1]
[ext_resource path="res://assets/balcony/composter.png" type="Texture" id=2]
[ext_resource path="res://assets/balcony/background.png" type="Texture" id=3]
[ext_resource path="res://assets/balcony/plant_bed.png" type="Texture" id=4]
[ext_resource path="res://assets/balcony/chest.png" type="Texture" id=5]
[ext_resource path="res://assets/balcony/barrel.png" type="Texture" id=6]
[ext_resource path="res://src/scenes/balcony/areas/co_area_2D.gd" type="Script" id=7]
[ext_resource path="res://src/scenes/balcony/areas/b_area_2D.gd" type="Script" id=8]
[ext_resource path="res://src/scenes/balcony/areas/p_area_2D.gd" type="Script" id=9]
[ext_resource path="res://src/scenes/balcony/areas/ch_area_2D.gd" type="Script" id=10]
[ext_resource path="res://src/scenes/balcony/areas/wc_area_2D.gd" type="Script" id=11]
[ext_resource path="res://src/scenes/balcony/balcony.gd" type="Script" id=12]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 color = vec4(1.0);
uniform float width = 1.5;
uniform int pattern = 2;
uniform bool inside = false;
uniform bool add_margins = true; 
uniform bool is_on = false;

void vertex() {
	if (is_on) {
		if (add_margins) {
			VERTEX += (UV * 2.0 - 1.0) * width;
		}
	}
	
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	if (is_on) {
		vec2 uv = UV;
		
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}	
	} else {
		COLOR = texture(TEXTURE, UV)
	}
}"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/color = Plane( 1, 1, 1, 1 )
shader_param/width = 1.5
shader_param/pattern = 2
shader_param/inside = false
shader_param/add_margins = true
shader_param/is_on = false

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 color = vec4(1.0);
uniform float width = 1.5;
uniform int pattern = 2;
uniform bool inside = false;
uniform bool add_margins = true; 
uniform bool is_on = false;

void vertex() {
	if (is_on) {
		if (add_margins) {
			VERTEX += (UV * 2.0 - 1.0) * width;
		}
	}
	
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	if (is_on) {
		vec2 uv = UV;
		
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}	
	} else {
		COLOR = texture(TEXTURE, UV)
	}
}"

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 3 )
shader_param/color = Plane( 1, 1, 1, 1 )
shader_param/width = 1.5
shader_param/pattern = 2
shader_param/inside = false
shader_param/add_margins = true
shader_param/is_on = false

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec4 color = vec4(1.0);
uniform float width = 1.5;
uniform int pattern = 2;
uniform bool inside = false;
uniform bool add_margins = true; 
uniform bool is_on = false;

void vertex() {
	if (is_on) {
		if (add_margins) {
			VERTEX += (UV * 2.0 - 1.0) * width;
		}
	}
	
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	if (is_on) {
		vec2 uv = UV;
		
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}	
	} else {
		COLOR = texture(TEXTURE, UV)
	}
}"

[sub_resource type="ShaderMaterial" id=6]
resource_local_to_scene = true
shader = SubResource( 5 )
shader_param/color = Plane( 1, 1, 1, 1 )
shader_param/width = 1.5
shader_param/pattern = 2
shader_param/inside = false
shader_param/add_margins = true
shader_param/is_on = false

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

uniform vec4 color = vec4(1.0);
uniform float width = 1.5;
uniform int pattern = 2;
uniform bool inside = false;
uniform bool add_margins = true; 
uniform bool is_on = false;

void vertex() {
	if (is_on) {
		if (add_margins) {
			VERTEX += (UV * 2.0 - 1.0) * width;
		}
	}
	
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	if (is_on) {
		vec2 uv = UV;
		
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}	
	} else {
		COLOR = texture(TEXTURE, UV)
	}
}"

[sub_resource type="ShaderMaterial" id=8]
resource_local_to_scene = true
shader = SubResource( 7 )
shader_param/color = Plane( 1, 1, 1, 1 )
shader_param/width = 1.5
shader_param/pattern = 2
shader_param/inside = false
shader_param/add_margins = true
shader_param/is_on = false

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform vec4 color = vec4(1.0);
uniform float width = 1.5;
uniform int pattern = 2;
uniform bool inside = false;
uniform bool add_margins = true; 
uniform bool is_on = false;

void vertex() {
	if (is_on) {
		if (add_margins) {
			VERTEX += (UV * 2.0 - 1.0) * width;
		}
	}
	
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	if (is_on) {
		vec2 uv = UV;
		
		if (add_margins) {
			vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
			
			uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
			
			if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
				COLOR.a = 0.0;
			} else {
				COLOR = texture(TEXTURE, uv);
			}
		} else {
			COLOR = texture(TEXTURE, uv);
		}
		
		if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
			COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
			COLOR.a += (1.0 - COLOR.a) * color.a;
		}	
	} else {
		COLOR = texture(TEXTURE, UV)
	}
}"

[sub_resource type="ShaderMaterial" id=10]
resource_local_to_scene = true
shader = SubResource( 9 )
shader_param/color = Plane( 1, 1, 1, 1 )
shader_param/width = 1.5
shader_param/pattern = 2
shader_param/inside = false
shader_param/add_margins = true
shader_param/is_on = false

[node name="Balcony" type="Node2D"]
script = ExtResource( 12 )

[node name="Sprites" type="Node2D" parent="."]

[node name="Background" type="Sprite" parent="Sprites"]
texture = ExtResource( 3 )
centered = false

[node name="CoArea2D" type="Area2D" parent="Sprites"]
script = ExtResource( 7 )

[node name="Sprite" type="Sprite" parent="Sprites/CoArea2D"]
material = SubResource( 2 )
texture = ExtResource( 2 )
centered = false

[node name="Collision" type="CollisionPolygon2D" parent="Sprites/CoArea2D"]
polygon = PoolVector2Array( 3, 31, 19, 14, 46, 14, 46, 38, 33, 53, 32, 48, 28, 41, 14, 37, 9, 38 )

[node name="BArea2D" type="Area2D" parent="Sprites"]
script = ExtResource( 8 )

[node name="Sprite" type="Sprite" parent="Sprites/BArea2D"]
material = SubResource( 4 )
texture = ExtResource( 6 )
centered = false

[node name="Collision" type="CollisionPolygon2D" parent="Sprites/BArea2D"]
polygon = PoolVector2Array( -1, 42, 14, 38, 28, 43, 31, 50, 31, 55, 19, 69, 24, 90, 20, 91, 12, 92, -1, 90 )

[node name="ChArea2D" type="Area2D" parent="Sprites"]
script = ExtResource( 10 )

[node name="Sprite" type="Sprite" parent="Sprites/ChArea2D"]
material = SubResource( 6 )
texture = ExtResource( 5 )
centered = false

[node name="Collision" type="CollisionPolygon2D" parent="Sprites/ChArea2D"]
polygon = PoolVector2Array( 153, 34, 153, 21, 156, 16, 161, 15, 176, 16, 194, 31, 194, 59, 182, 61, 180, 59, 174, 58 )

[node name="PArea2D" type="Area2D" parent="Sprites"]
script = ExtResource( 9 )

[node name="Sprite" type="Sprite" parent="Sprites/PArea2D"]
material = SubResource( 8 )
texture = ExtResource( 4 )
centered = false

[node name="Collision" type="CollisionPolygon2D" parent="Sprites/PArea2D"]
polygon = PoolVector2Array( 21, 70, 55, 29, 144, 25, 172, 59, 167, 66, 167, 71, 155, 65, 155, 58, 145, 61, 145, 69, 151, 69, 163, 78, 163, 98, 30, 101 )

[node name="WCArea2D" type="Area2D" parent="Sprites"]
script = ExtResource( 11 )

[node name="Sprite" type="Sprite" parent="Sprites/WCArea2D"]
material = SubResource( 10 )
texture = ExtResource( 1 )
centered = false

[node name="Collision" type="CollisionPolygon2D" parent="Sprites/WCArea2D"]
polygon = PoolVector2Array( 147, 68, 147, 63, 150, 61, 153, 60, 153, 66, 168, 73, 168, 67, 173, 60, 179, 60, 185, 66, 185, 71, 188, 77, 188, 95, 184, 100, 174, 101, 168, 99, 165, 95, 165, 77, 152, 67 )

[node name="PlantPos01" type="Position2D" parent="Sprites"]
position = Vector2( 67, 32 )

[node name="PlantPos02" type="Position2D" parent="Sprites"]
position = Vector2( 98, 32 )

[node name="PlantPos03" type="Position2D" parent="Sprites"]
position = Vector2( 128, 32 )

[node name="PlantPos04" type="Position2D" parent="Sprites"]
position = Vector2( 60, 44 )

[node name="PlantPos05" type="Position2D" parent="Sprites"]
position = Vector2( 98, 44 )

[node name="PlantPos06" type="Position2D" parent="Sprites"]
position = Vector2( 136, 44 )

[connection signal="mouse_entered" from="Sprites/CoArea2D" to="Sprites/CoArea2D" method="_on_CoArea2D_mouse_entered"]
[connection signal="mouse_exited" from="Sprites/CoArea2D" to="Sprites/CoArea2D" method="_on_CoArea2D_mouse_exited"]
[connection signal="mouse_entered" from="Sprites/BArea2D" to="Sprites/BArea2D" method="_on_BArea2D_mouse_entered"]
[connection signal="mouse_exited" from="Sprites/BArea2D" to="Sprites/BArea2D" method="_on_BArea2D_mouse_exited"]
[connection signal="mouse_entered" from="Sprites/ChArea2D" to="Sprites/ChArea2D" method="_on_ChArea2D_mouse_entered"]
[connection signal="mouse_exited" from="Sprites/ChArea2D" to="Sprites/ChArea2D" method="_on_ChArea2D_mouse_exited"]
[connection signal="mouse_entered" from="Sprites/PArea2D" to="Sprites/PArea2D" method="_on_PArea2D_mouse_entered"]
[connection signal="mouse_exited" from="Sprites/PArea2D" to="Sprites/PArea2D" method="_on_PArea2D_mouse_exited"]
[connection signal="mouse_entered" from="Sprites/WCArea2D" to="Sprites/WCArea2D" method="_on_WCArea2D_mouse_entered"]
[connection signal="mouse_exited" from="Sprites/WCArea2D" to="Sprites/WCArea2D" method="_on_WCArea2D_mouse_exited"]
